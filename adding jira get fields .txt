import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.component.ComponentAccessor
import org.apache.commons.codec.binary.Base64;
import java.net.*;
import groovy.json.JsonSlurper;
import com.atlassian.mail.Email;
import com.atlassian.mail.server.MailServerManager;
import com.atlassian.mail.server.SMTPMailServer;
import com.atlassian.jira.ComponentManager;
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.customfields.manager.OptionsManager
import com.atlassian.jira.issue.customfields.option.Option
import com.atlassian.jira.issue.util.IssueChangeHolder

import com.atlassian.jira.ComponentManager
import com.atlassian.jira.issue.comments.CommentManager
import com.opensymphony.workflow.WorkflowContext
import org.apache.log4j.Category

def user = "JIRA_API";                                                      			// SNOW UserID
def passwd = "5h1n30N4ever!";                                               			// SNOW Password
def requestMethod = "PUT";                                                  			// Method Type
def URLParam = "https://sfsf.service-now.com/api/now/table/incident/838a52f6db4d3e408e5ef9231d9619cc";         	// SNOW Incident table URL (update with 
																												//"sys_id": "0ab12136db893a404418f5461d9619e8",
def query = "{\"u_customer_priority\":\"2\"}";               			// Data to POST to SNOW
URLConnection connection;                                                   			// URL Connection object

//
Issue issueKey  = issue
issue.getPriorityObject().getName(); //Prioty
issue.getDescription();
//

try {
    URL url;
    url = new URL(URLParam);
    def authString = user + ":" + passwd;
    byte[] authEncBytes = Base64.encodeBase64(authString.getBytes());
    String authStringEnc = new String(authEncBytes);
    connection = url.openConnection();
    connection.setRequestProperty("Authorization", "Basic " + authStringEnc);
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestProperty("Accept", "application/json");
    connection.doOutput = true;
    def writer = new OutputStreamWriter(connection.outputStream);
    writer.write(query);
    writer.flush();
    writer.close();
    connection.connect();
} catch (Exception e) {
    //ToDo:
}
if (connection.getResponseCode() == 200) {
    String nextLine;
    InputStreamReader inStream = new InputStreamReader(
            connection.getInputStream());
    BufferedReader buff = new BufferedReader(inStream);

    // Extracting only Incident number
    def json = new groovy.json.JsonBuilder()
    def slurper = new JsonSlurper()
    def result = slurper.parseText(buff.readLine())
    return result.result.number
	
	// Extract complete set
    /*while (true) {
        nextLine = buff.readLine();
        if (nextLine != null) {
            return nextLine;
        } else {
            break;
        }
    }*/
} else {
    return connection.getResponseMessage();
}