import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import com.atlassian.jira.issue.Issue;
import org.apache.commons.io.IOUtils;
import com.atlassian.jira.util.io.InputStreamConsumer;

// Get the current issue key
Issue issueKey = issue
def id = issueKey.getId()

// Get the current logged in user
def user = ComponentAccessor.getJiraAuthenticationContext().getUser().name

// Get a manager to handle the copying of attachments
def attachmentManager = ComponentAccessor.getAttachmentManager()

// Get the default attachment path from its manager
def attachmentPathManager = ComponentAccessor.getAttachmentPathManager().attachmentPath.toString()

// Get the current date
def today = new Date()

// Get the last attachments file properties needed by the attachment manager to copy it. 
def fileName = issueKey.attachments.last()?.filename.toString()
def fileType = issueKey.attachments.last()?.mimetype.toString()

//To get all attachments of an issue
def attachments = attachmentManager.getAttachments(issueKey) //attachments is list<attachments>

for (int i = 0; i < attachments.size(); i++) {
    //stream the attachments
    final OutputStream out;
    ComponentAccessor.getAttachmentManager().streamAttachmentContent(attachments[i], new InputStreamConsumer<Void>()
    {
        public Void withInputStream(final InputStream is) throws IOException {
            try {
               IOUtils.copy(is, out); //Exception caught
            }
            finally {
                IOUtils.closeQuietly(out);
            }
            return null;
        }
	});
}
